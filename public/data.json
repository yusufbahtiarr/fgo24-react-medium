[
  {
    "username": "Rian",
    "slug": "promise-async-await",
    "title": "Promise Async Await, dan Ketika Dia Bertemu Looping Control Flow",
    "body": "Setiap developer JavaScript pasti akan berkenalan dengan yang namanya fitur JavaScript yang bernama Promise, Callback, dan Async Await. Ketiga fitur tersebut selalu dipakai ketika JavaScript perlu menjalankan eksekusi kode secara “asinkronus” ke dalam “event loop” dari proses utama JavaScript itu sendiri. <br /><br />Sistem Promise dan Callback ini membuat proses eksekusi di dalam “single thread” dari event loop JavaScript V8 engine tidak terjadi proses blocking. Dengan demikian, proses antrian eksekusi yang banyak, tidak menyebabkan sistem menjadi macet (not responding) di JavaScript engine tersebut. <br /><br />Contoh Promise yang sering kita temui adalah proses Fetch Http Request via network (istilah lain dari AJAX), proses baca tulis data, dan proses lain yang dibungkus oleh Promise dan Callback. Bahasan lebih detail tentang Promise, Callback, dan Async Await banyak sekali ditemui di internet, salah satunya pada tautan berikut ini.",
    "image": "https://miro.medium.com/v2/resize:fit:1100/format:webp/1*EtkNzpL8g7X6Zkj3cFEN7g.jpeg"
  },
  {
    "username": "Rian",
    "slug": "fitur-fitur-kunci-di-ecmascrip-2024",
    "title": "Fitur-Fitur Kunci di ECMAScript 2024",
    "body": "JavaScript memegang peran sentral sebagai bahasa pemrograman utama untuk pengembangan frontend maupun backend. Salah satu alasan utama di balik ketahanan dan popularitas JavaScript adalah evolusinya yang berkelanjutan, didorong oleh proses standardisasi yang cermat. Standar yang mendasari JavaScript dikenal sebagai ECMAScript (disingkat ES). <br /><br />Setiap tahun, komite teknis TC39, yang beranggotakan perwakilan dari berbagai perusahaan teknologi, bekerja untuk mengevaluasi proposal fitur-fitur baru dan menyempurnakan bahasa. Proses ini terdiri dari beberapa tahapan, mulai dari ide awal (Tahap 0) hingga persetujuan akhir dan inklusi dalam standar (Tahap 4). <br /><br />Rilis tahunan standar ECMAScript, seperti ES2023, ES2024, dan seterusnya, membawa serangkaian fitur baru yang memperkaya bahasa dan menawarkan cara-cara yang lebih efisien serta ekspresif bagi developer untuk menulis kode.ECMAScript 2024 mewakili langkah penting dalam evolusi ini. Standar yang dirilis pada pertengahan tahun 2024 ini membawa sejumlah fitur signifikan yang telah melewati proses evaluasi ketat dan siap untuk diimplementasikan serta digunakan dalam lingkungan produksi. <br /><br />Fitur-fitur ini dirancang untuk mengatasi tantangan umum dalam pengembangan modern, meningkatkan kejelasan kode, menyederhanakan tugas-tugas yang sebelumnya memerlukan boilerplate, dan bahkan memperkenalkan kapabilitas baru yang kuat.",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*mNKYKS9B-w-NwqPQz3q08A.png"
  },
  {
    "username": "Rian",
    "slug": "menyelami-dunia-http-request",
    "title": "Menyelami Dunia HTTP Request dalam JavaScript Menggunakan Axios",
    "body": "Setiap developer JavaScript pasti akan berkenalan dengan yang namanya fitur JavaScript yang bernama Promise, Callback, dan Async Await. Ketiga fitur tersebut selalu dipakai ketika JavaScript perlu menjalankan eksekusi kode secara “asinkronus” ke dalam “event loop” dari proses utama JavaScript itu sendiri. <br /><br />Sistem Promise dan Callback ini membuat proses eksekusi di dalam “single thread” dari event loop JavaScript V8 engine tidak terjadi proses blocking. Dengan demikian, proses antrian eksekusi yang banyak, tidak menyebabkan sistem menjadi macet (not responding) di JavaScript engine tersebut. Contoh Promise yang sering kita temui adalah proses Fetch Http Request via network (istilah lain dari AJAX), proses baca tulis data, dan proses lain yang dibungkus oleh Promise dan Callback. <br /><br />Bahasan lebih detail tentang Promise, Callback, dan Async Await banyak sekali ditemui di internet, salah satunya pada tautan berikut ini.",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*w2RF69dD9xGfE7q0KhKqpw.png"
  },
  {
    "username": "Rian",
    "slug": "javascript-dengan-temporal-api",
    "title": "Membangun Masa Depan Tanggal dan Waktu di JavaScript Dengan Temporal API",
    "body": "Dalam lanskap pengembangan perangkat lunak modern, penanganan tanggal dan waktu merupakan fondasi yang tak terhindarkan bagi hampir setiap aplikasi, dari sistem keuangan hingga platform media sosial, dari aplikasi penjadwalan hingga layanan analitik. Akurasi, keandalan, dan kemampuan untuk beroperasi secara global dengan mempertimbangkan zona waktu dan kalender yang beragam adalah persyaratan fundamental. <br /><br />Namun, sudah menjadi rahasia umum di kalangan pengembang JavaScript bahwa objek Date bawaan sering kali menjadi sumber kebingungan, bug, dan frustrasi yang signifikan. Didesain di era awal web dengan fokus yang lebih sederhana, Date memiliki kelemahan mendasar seperti mutabilitas yang tidak terduga, API yang membingungkan dan tidak konsisten, serta penanganan zona waktu yang rentan kesalahan dan ambigu. <br /><br />Mengembangkan fitur yang membutuhkan manipulasi tanggal dan waktu yang kompleks, seperti menghitung durasi lintas zona waktu atau menjadwalkan acara berulang dengan mempertimbangkan aturan kalender yang berbeda, sering kali memerlukan penggunaan library pihak ketiga atau penulisan kode boilerplate yang rawan kesalahan. <br /><br />Menyadari kebutuhan yang mendesak akan solusi yang lebih baik, komite teknis ECMAScript (TC39) telah mengembangkan proposal Temporal API. Temporal dirancang dari awal untuk menjadi API penanganan tanggal dan waktu yang komprehensif, immutable, eksplisit dalam representasi dan operasi, serta mampu menangani kerumitan dunia nyata seperti zona waktu IANA dan sistem kalender non-Gregorian dengan cara yang andal.",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*N7eSk0H82a46dqWq72GblA.png"
  },
  {
    "username": "Rian",
    "slug": "membatalkan-http-request",
    "title": "Membatalkan HTTP Request: Fetch API dengan AbortController vs Axios Cancel Token",
    "body": "Dalam pengembangan web modern, membatalkan HTTP request yang tidak diperlukan adalah kebutuhan kritis untuk: Mengoptimasi performa (mengurangi beban jaringan). Mencegah memory leak (terutama di Single Page Applications). Meningkatkan UX (misal: membatalkan request saat pengguna beralih halaman). <br /><br />Dua pendekatan utama: Fetch API dengan AbortController (native browser API). Axios dengan CancelToken (library eksternal). Membatalkan Request dengan Fetch API + AbortController AbortController adalah API browser yang menyediakan cara untuk membatalkan operasi asinkron seperti Fetch. Cara Kerja: Buat instance AbortController. Dapatkan signal dari controller. Teruskan signal ke Fetch request. Panggil controller.abort() untuk membatalkan. Implementasi Dasar",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*vLO5sqmSIMvPcga2ec3eSg.jpeg"
  },
  {
    "username": "Rian",
    "slug": "menguasai-asynchronous-javascript",
    "title": "Menguasai Asynchronous JavaScript: Promise, Async/Await, dan Parallelisme",
    "body": "Dalam dunia pengembangan web modern, JavaScript telah menjadi tulang punggung untuk membangun aplikasi yang dinamis dan responsif. Salah satu aspek krusial yang membedakan JavaScript (khususnya di lingkungan browser dan Node.js) dari banyak bahasa pemrograman tradisional adalah model eksekusinya yang single-threaded namun memiliki kemampuan untuk menangani operasi asynchronous. Kemampuan ini sangat penting untuk tugas-tugas yang memakan waktu, seperti mengambil data dari API eksternal, membaca file, atau berinteraksi dengan database, tanpa memblokir eksekusi kode lainnya dan membuat aplikasi menjadi freeze atau tidak responsif. <br /><br />Memahami dan mengelola operasi asinkron adalah keterampilan fundamental bagi setiap pengembang JavaScript. Artikel ini akan membawa Anda dalam perjalanan mendalam untuk menguasai teknik-teknik kunci dalam penanganan asinkron di JavaScript modern. Kita akan memulai dengan memahami konsep dasar asinkron, kemudian menyelami Promises sebagai pondasi untuk manajemen kode asinkron yang lebih terstruktur, dilanjutkan dengan Async/Await sebagai sintaks gula (syntactic sugar) yang menyederhanakan pekerjaan dengan Promises, dan terakhir, kita akan mengeksplorasi cara menjalankan beberapa operasi asinkron secara paralel menggunakan **Promise.all()** dan **Promise.allSettled()**. Artikel ini ditujukan bagi Anda yang sudah memiliki pemahaman dasar tentang JavaScript dan ingin memperdalam pengetahuan tentang cara kerja dan praktik terbaik dalam menangani operasi asinkron untuk membangun aplikasi yang efisien, responsif, dan mudah dikelola.",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*jVsdplY6eb5FJ2RijJz7UQ.jpeg"
  },
  {
    "username": "Rian",
    "slug": "mengelola-operasi-asinkron",
    "title": "Mengelola Operasi Asinkron dalam Perulangan di JavaScript: Dari Sekuensial Hingga Paralel dengan Promise dan Async/Await",
    "body": "Dalam pengembangan perangkat lunak modern menggunakan JavaScript, interaksi dengan sumber daya eksternal seperti API web, sistem file, atau database seringkali merupakan bagian integral dari aplikasi. Operasi-operasi ini, secara inheren, bersifat asinkron. Seperti yang telah kita bahas sebelumnya (atau Anda mungkin sudah ketahui), JavaScript menggunakan model asinkron untuk menangani tugas-tugas yang memakan waktu tanpa memblokir thread eksekusi utama, sehingga menjaga aplikasi tetap responsif. Promises dan Async/Await adalah alat fundamental yang memungkinkan kita mengelola alur kontrol operasi asinkron dengan cara yang lebih terstruktur dan mudah dibaca dibandingkan dengan callback. Namun, tantangan muncul ketika kita perlu melakukan operasi asinkron berulang kali, misalnya, memproses daftar item satu per satu, atau mengambil data terkait untuk setiap item dalam sebuah koleksi. Menggabungkan logika perulangan (loops) dengan operasi asinkron menggunakan Promises dan Async/Await seringkali menjadi sumber kebingungan, karena perilaku asinkron dapat berinteraksi secara tak terduga dengan sifat sinkron dari banyak konstruksi perulangan tradisional di JavaScript. Artikel ini akan menyelami secara mendalam bagaimana menangani operasi asinkron di dalam berbagai jenis perulangan di JavaScript. Kita akan mengeksplorasi perbedaan perilaku antara loop for tradisional, for...of, dan metode iterasi array seperti forEach, map, filter, dan reduce ketika dihadapkan dengan kode asinkron (await). Kita akan mempelajari teknik untuk mengeksekusi operasi asinkron secara sekuensial (satu per satu) dan secara paralel (bersamaan), serta membahas kapan dan mengapa memilih salah satu pendekatan tersebut. Terakhir, kita akan melihat cara mengelola error dan beberapa skenario lanjutan termasuk mengontrol jumlah operasi yang berjalan secara bersamaan (konkurensi terbatas).",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*1l7W0XK2yaUR2vDsm0qmrg.jpeg"
  },
  {
    "username": "Rian",
    "slug": "mengenal-nodejs-dan-npm",
    "title": "Mengenal Node.js dan NPM, Manajemen Paket untuk Pengembangan Modern",
    "body": "Node.js telah merevolusi pengembangan backend dan tooling JavaScript dengan memungkinkan eksekusi kode di luar browser. Salah satu pilar utamanya adalah NPM (Node Package Manager), yang menyediakan sistem manajemen dependensi terbesar di dunia dengan lebih dari 2 juta paket. Artikel ini akan membahas Node.js dan NPM secara mendalam, mencakup: Konsep teknis di balik Node.js dan NPM Cara kerja dependency resolution Optimasi manajemen paket untuk proyek skala besar Perbandingan dengan alternatif seperti Yarn dan PNPM Apa Itu Node.js? Arsitektur Node.js: Event Loop dan Non-Blocking I/O Node.js dibangun di atas mesin V8 JavaScript dan menggunakan arsitektur event-driven. Berbeda dengan model tradisional berbasis thread (seperti Apache), Node.js beroperasi secara single-threaded dengan mekanisme event loop.",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*Cb1cOnnHpvnXLcVeIgO0oQ.jpeg"
  },
  {
    "username": "Rian",
    "slug": "memahami-async-await-dalam-javascript",
    "title": "Memahami Async/Await dalam JavaScript: Panduan Lengkap dengan Contoh Pengambilan Data dari API",
    "body": "Dalam era modern pengembangan web, JavaScript terus berkembang untuk memenuhi kebutuhan pengembang dalam menciptakan aplikasi yang cepat, efisien, dan responsif. Salah satu fitur penting yang membantu pengembang menangani operasi asynchronous dengan cara yang lebih mudah dipahami dan ditulis adalah async dan await. Artikel ini akan membahas secara komprehensif mengenai konsep async dan await dalam JavaScript, bagaimana cara kerjanya, serta penerapannya dalam pengambilan data dari web menggunakan API JSONPlaceholder. Asynchronous Programming dalam JavaScript JavaScript secara bawaan bersifat single-threaded, yang berarti hanya satu operasi dapat dijalankan dalam satu waktu. Namun, untuk meningkatkan performa dan pengalaman pengguna, JavaScript menyediakan cara untuk menangani operasi asynchronous seperti permintaan HTTP, pembacaan file, atau operasi basis data tanpa memblokir thread utama. Pendekatan tradisional menggunakan callback sering menyebabkan apa yang dikenal sebagai “callback hell,” yakni struktur kode yang sulit dibaca dan dipelihara. Promise diperkenalkan untuk mengatasi masalah ini dengan menyediakan cara chaining yang lebih rapi. Namun, penggunaan async dan await yang diperkenalkan dalam ECMAScript 2017 (ES8) memberikan sintaks yang lebih sederhana dan mirip dengan kode synchronous.",
    "image": "https://miro.medium.com/v2/resize:fit:1100/format:webp/1*UjCukn6V9MmebKGr3ddayw.jpeg"
  },
  {
    "username": "Rian",
    "slug": "referensi-belajar-pengembangan",
    "title": "Referensi Belajar Pengembangan Aplikasi dengan JavaScript",
    "body": "JavaScript (JS) adalah bahasa pemrograman yang ringan, interpreted, bersifat dinamis, dan dapat bersifat ke arah object oriented programming atau functional programming, yang dirintis dan didesain oleh Brendan Eich. Pada perkembangannya JavaScript mulai distandarisasi oleh organisasi bernama ECMA (European Computer Manufacturers Association) yang setiap standarnya bisa disebut dengan penamaan EcmaScript dan tahun rilis standarnya, misalnya ES2015, ES2016, ES2017, dst. Karena telah distandarisasi oleh ECMA, maka implementasi JavaScript di dalam teknologi web bisa merata dan diperluas ke implementasi di luar browser. Misalnya dengan munculnya runtime JavaScript yang terkenal dengan nama Node JS yang membuat JavaScript bisa berjalan di lingkungan server, desktop, IoT, blockchain, machine learning, dan masih banyak lagi. Semua akan JavaScript pada waktunya. JavaScript saat ini merupakan salah satu bahasa pemrograman yang banyak dipakai dalam pembuatan aplikasi web dan aplikasi lainnya. Beberapa orang banyak yang menyebutkan JavaScript adalah lingua franca of the web, multi purpose versatile programming language . Bahkan ada candaan di kalangan JS developer, yaitu “semua akan JavaScript pada waktunya” . Beberapa framework dan library JS pun sudah banyak bermunculan dengan tujuan fungsinya masing-masing, sebut saja React-Angular-Vue-Svelte untuk membuat halaman web bagian front end, Express-Adonis-Nest-Hapi untuk membuat backend service aplikasi web dan mobile, TensorFlowJS-BrainJS-StdlibJS untuk machine learning, Electron JS dan NW.js yang terkenal untuk pembuatan aplikasi desktop, Phaser dan Construct untuk game engine, React Native-Ionic-NativeScript-PWA untuk pembuatan aplikasi mobile , dan masih banyak lagi.",
    "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*4h-p1NCFaAzQAMyAkNzmpg.jpeg"
  }
]
